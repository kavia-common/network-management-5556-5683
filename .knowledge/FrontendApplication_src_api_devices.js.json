{"is_source_file": true, "format": "JavaScript", "description": "This file defines API functions for managing device data in a network management application, including CRUD operations, listing, and pinging devices, with support for mock data and server-side requests.", "external_files": ["./client"], "external_methods": ["http.request", "getUseMocks"], "published": ["listDevices", "getDevice", "createDevice", "updateDevice", "deleteDevice", "pingDevice"], "classes": [], "methods": [{"name": "listDevices({ page, limit } = {})", "description": "Fetch devices list from backend or mock store, supports pagination.", "scope": "", "scopeKind": ""}, {"name": "getDevice(id)", "description": "Fetch a single device by id from backend or mock store.", "scope": "", "scopeKind": ""}, {"name": "createDevice(payload)", "description": "Create a new device, with mock support for uniqueness constraints.", "scope": "", "scopeKind": ""}, {"name": "updateDevice(id, payload)", "description": "Update device details by id, with mock support for conflict detection.", "scope": "", "scopeKind": ""}, {"name": "deleteDevice(id)", "description": "Delete a device by id, supporting mock operations.", "scope": "", "scopeKind": ""}, {"name": "pingDevice(id)", "description": "Trigger a ping to refresh device status, returning the updated device.", "scope": "", "scopeKind": ""}, {"name": "normalizeServerPagination(res)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["getUseMocks()", "http.request()", "delay()", "mapToServer()", "mapFromServer()", "normalizeServerPagination()"], "search-terms": ["devices", "device API", "mock store", "device CRUD", "network management", "ping device", "pagination"], "state": 2, "file_id": 52, "knowledge_revision": 252, "git_revision": "eb785b146935bfac45a546358c0cb89801aae2d2", "revision_history": [{"219": "7b5cb4fb9d331048ac309f089e56750130ab028e"}, {"244": "7b5cb4fb9d331048ac309f089e56750130ab028e"}, {"248": "7b5cb4fb9d331048ac309f089e56750130ab028e"}, {"252": "eb785b146935bfac45a546358c0cb89801aae2d2"}], "ctags": [{"_type": "tag", "name": "createDevice", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function createDevice(payload) {$/", "language": "JavaScript", "kind": "function", "signature": "(payload)"}, {"_type": "tag", "name": "data", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^      err.data = { field: 'name', message: 'Device name or IP must be unique.' };$/", "language": "JavaScript", "kind": "class", "scope": "err", "scopeKind": "class"}, {"_type": "tag", "name": "delay", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^const delay = (ms) => new Promise((r) => setTimeout(r, ms));$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "deleteDevice", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function deleteDevice(id) {$/", "language": "JavaScript", "kind": "function", "signature": "(id)"}, {"_type": "tag", "name": "field", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^      err.data = { field: 'name', message: 'Device name or IP must be unique.' };$/", "language": "JavaScript", "kind": "property", "scope": "err.data", "scopeKind": "class"}, {"_type": "tag", "name": "getDevice", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function getDevice(id) {$/", "language": "JavaScript", "kind": "function", "signature": "(id)"}, {"_type": "tag", "name": "listDevices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function listDevices({ page, limit } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "({ page, limit } = {})"}, {"_type": "tag", "name": "mapFromServer", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^const mapFromServer = (d) => ({$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "mapToServer", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^const mapToServer = (d) => ({$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^      err.data = { field: 'name', message: 'Device name or IP must be unique.' };$/", "language": "JavaScript", "kind": "property", "scope": "err.data", "scopeKind": "class"}, {"_type": "tag", "name": "mockDevices", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^let mockDevices = [$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "normalizeServerPagination", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^function normalizeServerPagination(res) {$/", "language": "JavaScript", "kind": "function", "signature": "(res)"}, {"_type": "tag", "name": "pingDevice", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function pingDevice(id) {$/", "language": "JavaScript", "kind": "function", "signature": "(id)"}, {"_type": "tag", "name": "updateDevice", "path": "/home/kavia/workspace/code-generation/network-management-5556-5683/FrontendApplication/src/api/devices.js", "pattern": "/^export async function updateDevice(id, payload) {$/", "language": "JavaScript", "kind": "function", "signature": "(id, payload)"}], "hash": "9cc7f58915c76ea57e22802f1eadb85d", "format-version": 4, "code-base-name": "FrontendApplication", "filename": "FrontendApplication/src/api/devices.js", "fields": [{"name": "err.data = { field: 'name', message: 'Device name or IP must be unique.' };", "scope": "err.data", "scopeKind": "class", "description": "unavailable"}, {"name": "let mockDevices = [", "scope": "", "scopeKind": "", "description": "unavailable"}]}